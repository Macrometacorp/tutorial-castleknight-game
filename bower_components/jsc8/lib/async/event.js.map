{"version":3,"file":"event.js","sourceRoot":"","sources":["../../src/event.ts"],"names":[],"mappings":";;AAEA,IAAkB,MAIjB;AAJD,WAAkB,MAAM;IACpB,mBAAS,CAAA;IACT,uBAAa,CAAA;IACb,yBAAe,CAAA;AACnB,CAAC,EAJiB,MAAM,GAAN,cAAM,KAAN,cAAM,QAIvB;AAED,IAAkB,UAOjB;AAPD,WAAkB,UAAU;IACxB,uCAAyB,CAAA;IACzB,6BAAe,CAAA;IACf,mCAAqB,CAAA;IACrB,2BAAa,CAAA;IACb,+BAAiB,CAAA;IACjB,qCAAuB,CAAA;AAC3B,CAAC,EAPiB,UAAU,GAAV,kBAAU,KAAV,kBAAU,QAO3B;AAED,IAAkB,UAMjB;AAND,WAAkB,UAAU;IACxB,+BAAiB,CAAA;IACjB,+BAAiB,CAAA;IACjB,+BAAiB,CAAA;IACjB,iCAAmB,CAAA;IACnB,6BAAe,CAAA;AACnB,CAAC,EANiB,UAAU,GAAV,kBAAU,KAAV,kBAAU,QAM3B;AAWD;IAMI,YAAY,UAAsB,EAAE,UAAkB,EAAE,OAAgB;QACpE,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;QAC9B,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;IAC3B,CAAC;IAED,MAAM,CAAC,aAAkC;QACrC,MAAM,EAAE,MAAM,EAAE,WAAW,EAAE,UAAU,EAAE,OAAO,EAAE,MAAM,EAAE,UAAU,EAAE,GAAG,aAAa,CAAC;QAEvF,OAAO,IAAI,CAAC,WAAW,CAAC,OAAO,CAC3B;YACI,MAAM,EAAE,MAAM;YACd,IAAI,EAAE,SAAS;YACf,IAAI,EAAE;gBACF,MAAM;gBACN,WAAW;gBACX,UAAU,EAAE,IAAI,CAAC,UAAU;gBAC3B,UAAU;gBACV,OAAO;gBACP,MAAM;gBACN,UAAU;aACb;SACJ,EACD,GAAG,CAAC,EAAE;YACF,IAAI,CAAC,OAAO,GAAG,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC;YAC7B,OAAO,GAAG,CAAC,IAAI,CAAA;QACnB,CAAC,CACJ,CAAC;IACN,CAAC;IAED,OAAO;QACH,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;YACf,MAAM,IAAI,KAAK,CAAC,uFAAuF,CAAC,CAAC;SAC5G;QACD,OAAO,IAAI,CAAC,WAAW,CAAC,OAAO,CAC3B;YACI,MAAM,EAAE,KAAK;YACb,IAAI,EAAE,WAAW,IAAI,CAAC,OAAO,EAAE;SAClC,EACD,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAClB,CAAC;IACN,CAAC;CACJ;AAhDD,sBAgDC","sourcesContent":["import { Connection } from \"./connection\";\n\nexport const enum Status {\n    OK = 'OK',\n    WARN = 'WARN',\n    ERROR = 'ERROR',\n}\n\nexport const enum EntityType {\n    COLLECTION = 'COLLECTION',\n    GRAPH = 'GRAPH',\n    PIPELINE = 'PIPELINE',\n    AUTH = 'AUTH',\n    STREAM = 'STREAM',\n    GEOFABRIC = 'GEOFABRIC',\n}\n\nexport const enum ActionType {\n    CREATE = 'CREATE',\n    UPDATE = 'UPDATE',\n    DELETE = 'DELETE',\n    EXECUTE = 'EXECUTE',\n    LOGIN = 'LOGIN',\n}\n\nexport interface IEventCreateRequest {\n    status: Status;\n    description: string;\n    entityType: EntityType;\n    details: string;\n    action: ActionType;\n    attributes: object;\n}\n\nexport class Event {\n\n    _connection: Connection;\n    entityName: string;\n    eventId?: number;\n\n    constructor(connection: Connection, entityName: string, eventId?: number) {\n        this._connection = connection;\n        this.entityName = entityName;\n        this.eventId = eventId;\n    }\n\n    create(requestObject: IEventCreateRequest) {\n        const { status, description, entityType, details, action, attributes } = requestObject;\n\n        return this._connection.request(\n            {\n                method: \"POST\",\n                path: \"/events\",\n                body: {\n                    status,\n                    description,\n                    entityName: this.entityName,\n                    entityType,\n                    details,\n                    action,\n                    attributes,\n                }\n            },\n            res => {\n                this.eventId = res.body._key;\n                return res.body\n            }\n        );\n    }\n\n    details() {\n        if (!this.eventId) {\n            throw new Error(\"Event ID is not set. Either provide while creating the handler or create a new event.\");\n        }\n        return this._connection.request(\n            {\n                method: \"GET\",\n                path: `/events/${this.eventId}`,\n            },\n            res => res.body\n        );\n    }\n}"]}