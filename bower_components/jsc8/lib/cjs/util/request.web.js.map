{"version":3,"file":"request.web.js","sourceRoot":"","sources":["../../../src/util/request.web.ts"],"names":[],"mappings":";;AACA,6BAA6D;AAG7D,yCAAsC;AACtC,+BAAwB;AACxB,8CAA0C;AAE7B,QAAA,SAAS,GAAG,IAAI,CAAC;AAE9B,cAAiB,GAAM,EAAE,IAAiB;IACxC,MAAM,MAAM,GAAG,EAAO,CAAC;IACvB,KAAK,MAAM,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE;QAClC,IAAI,IAAI,CAAC,QAAQ,CAAC,GAAc,CAAC;YAAE,SAAS;QAC5C,MAAM,CAAC,GAAc,CAAC,GAAG,GAAG,CAAC,GAAc,CAAC,CAAC;KAC9C;IACD,OAAO,MAAM,CAAC;AAChB,CAAC;AAED,uBAA8B,OAAe,EAAE,YAAiB,EAAE,KAAU;IAC1E,MAAM,YAAY,GAAG,WAAQ,CAAC,OAAO,CAAC,CAAC;IACvC,MAAM,OAAO,GAAG,IAAI,CAAC,YAAY,EAAE;QACjC,WAAW;QACX,gBAAgB;QAChB,YAAY;KACb,CAAC,CAAC;IAEH,OAAO,iBACL,EAAE,MAAM,EAAE,GAAG,EAAE,OAAO,EAAE,IAAI,EAAE,YAAY,EAAkB,EAC5D,EAAyB;QAEzB,MAAM,QAAQ,qBACT,YAAY,IACf,QAAQ,EAAE,GAAG,CAAC,QAAQ;gBACpB,CAAC,CAAC,YAAY,CAAC,QAAQ;oBACrB,CAAC,CAAC,mBAAQ,CAAC,YAAY,CAAC,QAAQ,EAAE,GAAG,CAAC,QAAQ,CAAC;oBAC/C,CAAC,CAAC,GAAG,CAAC,QAAQ;gBAChB,CAAC,CAAC,YAAY,CAAC,QAAQ,EACzB,MAAM,EAAE,GAAG,CAAC,MAAM;gBAChB,CAAC,CAAC,YAAY,CAAC,MAAM;oBACnB,CAAC,CAAC,GAAG,YAAY,CAAC,MAAM,IAAI,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE;oBACjD,CAAC,CAAC,GAAG,CAAC,MAAM;gBACd,CAAC,CAAC,YAAY,CAAC,MAAM,GACxB,CAAC;QAEF,IAAI,QAAQ,GAA0B,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;YACjD,QAAQ,GAAG,GAAG,EAAE,CAAC,SAAS,CAAC;YAC3B,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;QACf,CAAC,CAAC;QAEF,IAAI,KAAK,EAAE;YACT,MAAM,GAAG,GAAG,KAAK,CAAC,YAAS,CAAC,QAAQ,CAAC,oBAChC,OAAO,IACV,IAAI;gBACJ,MAAM;gBACN,OAAO,IACP;iBACC,IAAI,CAAC,CAAC,GAAQ,EAAE,EAAE;gBACjB,MAAM,WAAW,GAAG,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;gBACpD,iDAAiD;gBACjD,+CAA+C;gBAC/C,IAAI,WAAW,CAAC,KAAK,CAAC,sBAAS,CAAC,EAAE;oBAChC,OAAO,GAAG,CAAC;iBACZ;qBAAM;oBACL,MAAM,GAAG,CAAC;iBACX;YACH,CAAC,CAAC;iBACD,IAAI,CAAC,CAAC,IAAS,EAAE,EAAE;gBAClB,QAAQ,CAAC,IAAI,EAAE,IAAW,CAAC,CAAC;YAC9B,CAAC,CAAC;iBACD,KAAK,CAAC,CAAC,GAAQ,EAAE,EAAE;gBAClB,MAAM,KAAK,GAAG,EAAS,CAAC;gBACxB,KAAK,CAAC,OAAO,GAAG,GAAG,CAAC;gBACpB,IAAI,GAAG,CAAC,MAAM,EAAE;oBACd,KAAK,CAAC,MAAM,GAAG,GAAG,CAAC,MAAM,CAAC;iBAC3B;gBACD,IAAI,GAAG,CAAC,UAAU,EAAE;oBAClB,KAAK,CAAC,UAAU,GAAG,GAAG,CAAC,UAAU,CAAC;iBACnC;gBACD,QAAQ,CAAC,KAAK,CAAC,CAAC;YAClB,CAAC,CAAC,CAAC;SACN;aAAM;YACL,MAAM,GAAG,GAAG,aAAG,iBAEX,YAAY,EAAE,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,IACzC,OAAO,IACV,GAAG,EAAE,YAAS,CAAC,QAAQ,CAAC,EACxB,MAAM,EAAE,IAAI,EACZ,IAAI;gBACJ,MAAM;gBACN,OAAO,KAET,CAAC,GAAiB,EAAE,GAAS,EAAE,EAAE;gBAC/B,IAAI,CAAC,GAAG,EAAE;oBACR,IAAI,CAAC,GAAG,CAAC,IAAI;wBAAE,GAAG,CAAC,IAAI,GAAG,EAAE,CAAC;oBAC7B,QAAQ,CAAC,IAAI,EAAE,GAAmB,CAAC,CAAC;iBACrC;qBAAM;oBACL,MAAM,KAAK,GAAG,GAAgB,CAAC;oBAC/B,KAAK,CAAC,OAAO,GAAG,GAAG,CAAC;oBACpB,QAAQ,CAAC,KAAK,CAAC,CAAC;iBACjB;YACH,CAAC,CACF,CAAC;SACH;IACH,CAAC,CAAC;AACJ,CAAC;AAtFD,sCAsFC","sourcesContent":["import { C8jsError, C8jsResponse, RequestOptions } from \"./request.node\";\nimport { format as formatUrl, parse as parseUrl } from \"url\";\n\nimport { Errback } from \"./types\";\nimport { joinPath } from \"./joinPath\";\nimport xhr from \"./xhr\";\nimport { MIME_JSON } from \"../connection\";\n\nexport const isBrowser = true;\n\nfunction omit<T>(obj: T, keys: (keyof T)[]): T {\n  const result = {} as T;\n  for (const key of Object.keys(obj)) {\n    if (keys.includes(key as keyof T)) continue;\n    result[key as keyof T] = obj[key as keyof T];\n  }\n  return result;\n}\n\nexport function createRequest(baseUrl: string, agentOptions: any, fetch: any) {\n  const baseUrlParts = parseUrl(baseUrl);\n  const options = omit(agentOptions, [\n    \"keepAlive\",\n    \"keepAliveMsecs\",\n    \"maxSockets\",\n  ]);\n\n  return function request(\n    { method, url, headers, body, expectBinary }: RequestOptions,\n    cb: Errback<C8jsResponse>\n  ) {\n    const urlParts = {\n      ...baseUrlParts,\n      pathname: url.pathname\n        ? baseUrlParts.pathname\n          ? joinPath(baseUrlParts.pathname, url.pathname)\n          : url.pathname\n        : baseUrlParts.pathname,\n      search: url.search\n        ? baseUrlParts.search\n          ? `${baseUrlParts.search}&${url.search.slice(1)}`\n          : url.search\n        : baseUrlParts.search,\n    };\n\n    let callback: Errback<C8jsResponse> = (err, res) => {\n      callback = () => undefined;\n      cb(err, res);\n    };\n\n    if (fetch) {\n      const req = fetch(formatUrl(urlParts), {\n        ...options,\n        body,\n        method,\n        headers,\n      })\n        .then((res: any) => {\n          const contentType = res.headers.get(\"content-type\");\n          // TODO: make it work for other content-types too\n          // to make \"fetch\" a truly native agent in jsc8\n          if (contentType.match(MIME_JSON)) {\n            return res;\n          } else {\n            throw res;\n          }\n        })\n        .then((data: any) => {\n          callback(null, data as any);\n        })\n        .catch((err: any) => {\n          const error = {} as any;\n          error.request = req;\n          if (err.status) {\n            error.status = err.status;\n          }\n          if (err.statusText) {\n            error.statusText = err.statusText;\n          }\n          callback(error);\n        });\n    } else {\n      const req = xhr(\n        {\n          responseType: expectBinary ? \"blob\" : \"text\",\n          ...options,\n          url: formatUrl(urlParts),\n          useXDR: true,\n          body,\n          method,\n          headers,\n        },\n        (err: Error | null, res?: any) => {\n          if (!err) {\n            if (!res.body) res.body = \"\";\n            callback(null, res as C8jsResponse);\n          } else {\n            const error = err as C8jsError;\n            error.request = req;\n            callback(error);\n          }\n        }\n      );\n    }\n  };\n}\n"]}