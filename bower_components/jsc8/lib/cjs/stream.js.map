{"version":3,"file":"stream.js","sourceRoot":"","sources":["../../src/stream.ts"],"names":[],"mappings":"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","sourcesContent":["import { Connection } from \"./connection\";\nimport { getFullStreamPath } from \"./util/helper\";\nimport { stringify } from \"query-string\";\n\n// 2 document\n// 3 edge\n// 4 persistent\n\nimport { ws } from \"./util/webSocket\";\n\nexport enum StreamConstants {\n  PERSISTENT = \"persistent\",\n}\n\nexport type wsCallbackObj = {\n  onopen?: () => void;\n  onclose?: () => void;\n  onerror?: (e: Error) => void;\n  onmessage: (msg: string) => Promise<boolean> | boolean | void;\n};\n\nexport class Stream {\n  private _connection: Connection;\n  name: string;\n  global: boolean;\n  isCollectionStream: boolean;\n  topic: string;\n\n  constructor(\n    connection: Connection,\n    name: string,\n    local: boolean = false,\n    isCollectionStream: boolean = false\n  ) {\n    this._connection = connection;\n    this.isCollectionStream = isCollectionStream;\n\n    /**\n     * CHANGED this.local implementation to this.global\n     * keeping the stream as local so !local\n     */\n\n    this.global = !local;\n    this.name = name;\n\n    let topic = this.name;\n    if (!this.isCollectionStream) {\n      if (this.global) topic = `c8globals.${this.name}`;\n      else topic = `c8locals.${this.name}`;\n    }\n    this.topic = topic;\n  }\n\n  _getPath(useName: boolean, urlSuffix?: string): string {\n    let topic = useName ? this.name : this.topic;\n    return getFullStreamPath(topic, urlSuffix);\n  }\n\n  getOtp() {\n    return this._connection.request(\n      {\n        method: \"POST\",\n        path: \"/apid/otp\",\n        absolutePath: true,\n      },\n      (res) => res.body.otp\n    );\n  }\n\n  createStream() {\n    return this._connection.request(\n      {\n        method: \"POST\",\n        path: this._getPath(true),\n        qs: `global=${this.global}`,\n      },\n      (res) => res.body\n    );\n  }\n\n  backlog() {\n    const urlSuffix = \"/backlog\";\n    return this._connection.request(\n      {\n        method: \"GET\",\n        path: this._getPath(false, urlSuffix),\n        qs: `global=${this.global}`,\n      },\n      (res) => res.body\n    );\n  }\n\n  clearBacklog() {\n    const urlSuffix = `/clearbacklog`;\n    return this._connection.request(\n      {\n        method: \"POST\",\n        path: this._getPath(false, urlSuffix),\n        qs: `global=${this.global}`,\n      },\n      (res) => res.body\n    );\n  }\n\n  getStreamStatistics() {\n    const urlSuffix = \"/stats\";\n    return this._connection.request(\n      {\n        method: \"GET\",\n        path: this._getPath(false, urlSuffix),\n        qs: `global=${this.global}`,\n      },\n      (res) => res.body\n    );\n  }\n\n  deleteSubscription(subscription: string) {\n    const urlSuffix = `/subscription/${subscription}`;\n    return this._connection.request(\n      {\n        method: \"DELETE\",\n        path: this._getPath(false, urlSuffix),\n        qs: `global=${this.global}`,\n      },\n      (res) => res.body\n    );\n  }\n\n  expireMessages(expireTimeInSeconds: number) {\n    const urlSuffix = `/expiry/${expireTimeInSeconds}`;\n    return this._connection.request(\n      {\n        method: \"POST\",\n        path: this._getPath(false, urlSuffix),\n        qs: `global=${this.global}`,\n      },\n      (res) => res.body\n    );\n  }\n\n  clearSubscriptionBacklog(subscription: string) {\n    const urlSuffix = `/clearbacklog/${subscription}`;\n    return this._connection.request(\n      {\n        method: \"POST\",\n        path: this._getPath(false, urlSuffix),\n        qs: `global=${this.global}`,\n      },\n      (res) => res.body\n    );\n  }\n\n  getSubscriptionList() {\n    const urlSuffix = \"/subscriptions\";\n    return this._connection.request(\n      {\n        method: \"GET\",\n        path: this._getPath(false, urlSuffix),\n        qs: `global=${this.global}`,\n      },\n      (res) => res.body\n    );\n  }\n\n  deleteStream(force: boolean = false) {\n    return this._connection.request(\n      {\n        method: \"DELETE\",\n        path: this._getPath(false),\n        qs: `global=${this.global}&force=${force}`,\n      },\n      (res) => res.body\n    );\n  }\n\n  consumer(\n    subscriptionName: string,\n    dcName: string,\n    params: { [key: string]: any } = {}\n  ) {\n    const lowerCaseUrl = dcName.toLocaleLowerCase();\n    if (lowerCaseUrl.includes(\"http\") || lowerCaseUrl.includes(\"https\"))\n      throw \"Invalid DC name\";\n\n    const persist = StreamConstants.PERSISTENT;\n    const region = this.global ? \"c8global\" : \"c8local\";\n    const tenant = this._connection.getTenantName();\n    const queryParams = stringify(params);\n    let dbName = this._connection.getFabricName();\n\n    if (!dbName || !tenant)\n      throw \"Set correct DB and/or tenant name before using.\";\n\n    let consumerUrl = `wss://api-${dcName}/_ws/ws/v2/consumer/${persist}/${tenant}/${region}.${dbName}/${\n      this.topic\n    }/${subscriptionName}`;\n\n    // Appending query params to the url\n    consumerUrl = `${consumerUrl}?${queryParams}`;\n\n    return ws(consumerUrl);\n  }\n\n  producer(dcName: string, params: { [key: string]: any } = {}) {\n    if (!dcName) throw \"DC name not provided to establish producer connection\";\n\n    const lowerCaseUrl = dcName.toLocaleLowerCase();\n    if (lowerCaseUrl.includes(\"http\") || lowerCaseUrl.includes(\"https\"))\n      throw \"Invalid DC name\";\n\n    const persist = StreamConstants.PERSISTENT;\n    const region = this.global ? \"c8global\" : \"c8local\";\n    const tenant = this._connection.getTenantName();\n    const queryParams = stringify(params);\n    let dbName = this._connection.getFabricName();\n    if (!dbName || !tenant)\n      throw \"Set correct DB and/or tenant name before using.\";\n\n    let producerUrl = `wss://api-${dcName}/_ws/ws/v2/producer/${persist}/${tenant}/${region}.${dbName}/${\n      this.topic\n    }`;\n\n    // Appending query params to the url\n    producerUrl = `${producerUrl}?${queryParams}`;\n\n    return ws(producerUrl);\n  }\n\n  publishMessage(message: any) {\n    const urlSuffix = \"/publish\";\n    return this._connection.request(\n      {\n        method: \"POST\",\n        path: this._getPath(false, urlSuffix),\n        qs: `global=${this.global}`,\n        body: message,\n      },\n      (res) => res.body\n    );\n  }\n\n  getMessageTtl(){\n    return this._connection.request(\n      {\n        method: \"GET\",\n        path: \"/_api/streams/ttl\",\n      },\n      (res) => res.body\n    );\n  }\n\n  setMessageTtl(ttl: number = 3600){\n    return this._connection.request(\n      {\n        method: \"POST\",\n        path: `/_api/streams/ttl/${ttl}`,\n      },\n      (res) => res.body\n    );\n  }\n\n  deleteSubscriptions(subscription: string) {\n    const urlSuffix = `/subscriptions/${subscription}`;\n    return this._connection.request(\n      {\n        method: \"DELETE\",\n        path: this._getPath(false, urlSuffix),\n        qs: `global=${this.global}`,\n      },\n      (res) => res.body\n    );\n  }\n}\n"]}